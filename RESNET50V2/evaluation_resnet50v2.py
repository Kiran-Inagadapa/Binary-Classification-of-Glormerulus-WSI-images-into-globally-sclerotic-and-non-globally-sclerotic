# -*- coding: utf-8 -*-
"""evaluation_ResNet50V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g0EE-T85ni3jtRNkwTEeCc1lBzK1ZZ6u
"""

import numpy as np
import os
import tensorflow as tf
import pandas as pd
import sklearn as sk
import cv2
from PIL import Image, ImageEnhance
from google.colab import drive

drive.mount('/content/drive')

os.chdir('/content/drive/My Drive')

test_data_dir = input("Enter the Test Data Directory path: ")

# test_data_dir = '' # ENTER THE TEST DIRECTORY PATH DIRECTLY HERE AND COMMENT OUT ABOVE LINE

# DOWNLOAD THE BEST MODEL FROM THE LINK SPECIFIED IN README.md
best_model_filename = input('Enter the model file path: ')

# best_model_filename = '' # ENTER THE DOWNLOADED FILE_NAME DIRECTLY BY COMMENTING OUT THE ABOVE LINE (KEEP THE FILE IN THE SAME FOLDER OR DIRECTORY)

# CREATING NEW DIRECTORY TO STORE PROCESSED IMAGES
test_dir = 'preprocessed_test_data'
os.makedirs(test_dir, exist_ok=True)

def preprocess_images_by_color(input_dir, output_dir):
  if not os.path.exists(output_dir):
    os.makedirs(output_dir)

  for filename in os.listdir(input_dir):
    if filename.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
      image_path = os.path.join(input_dir, filename)
      output_path = os.path.join(output_dir, filename)

      try:
        with Image.open(image_path) as imlag:

          img =cv2.imread(image_path)
          # PREPROCESSING THE IMAGE
          img_processed = cv2.resize(img, (224, 224)) # FOR ResNet50

          # APPLYING COLOR ENHANCEMENTS
          # EQUALIZED HISTOGRAM
          img_yuv = cv2.cvtColor((img_processed * 255).astype(np.uint8), cv2.COLOR_RGB2YUV)
          img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
          img_processed = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2RGB)

          # CONVERT TO FLOAT32 FOR FURTHER PROCESSING
          img_processed = img_processed.astype(np.float32)

          # SATURATION AND HUE ENHANCEMENTS
          pil_img = Image.fromarray((img_processed * 255).astype(np.uint8))
          enhancer = ImageEnhance.Color(pil_img)
          pil_img = enhancer.enhance(1.5)  # INCREASED SATURATION BY 1.5 TIMES

          # SAVING THE PREPROCESSED IMAGE TO NEW DIRECTORY
          pil_img.save(output_path)

      except Exception as e:
        print(f"Error processing {image_path}: {e}")

preprocess_images_by_color(test_data_dir, test_dir)

# LOADING THE MODEL
best_model_1 = tf.keras.models.load_model(best_model_filename)

# CREATING LIST OF IMAGE FILES IN FOLDER
image_files = [os.path.join(test_dir, f) for f in os.listdir(test_dir) if os.path.isfile(os.path.join(test_dir, f))]

# PREDICTIONS ON TEST SET
predictions = []
for image_file in image_files:

  img = tf.keras.preprocessing.image.load_img(image_file)
  img_array = tf.keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)

  prediction = best_model_1.predict(img_array)
  predicted_class = 1 if prediction[0][0] >= 0.5 else 0

  predictions.append((os.path.basename(image_file), predicted_class))

# CREATING A CSV
df = pd.DataFrame(predictions, columns=['Name', 'Predicted_Class'])
df.to_csv('evaluation.csv', index=False)