# -*- coding: utf-8 -*-
"""evaluation_StackedEnsemble.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/143jAfJlrVQTBYhpMnNi6AdNDm1SUuZ7y
"""

import numpy as np
import os
import tensorflow as tf
import pandas as pd
import sklearn as sk
import cv2
from PIL import Image, ImageEnhance
import joblib
from google.colab import drive

drive.mount('/content/drive')

os.chdir('/content/drive/My Drive')

test_data_dir = input("Enter the Test Data Directory path: ")

# test_data_dir = '' # ENTER THE TEST DIRECTORY PATH DIRECTLY HERE AND COMMENT OUT ABOVE LINE

# DOWNLOAD THE BEST MODEL FROM THE LINK SPECIFIED IN README.md
best_model_1_filename = input('Enter the base learner 1 file path: ')
best_model_2_filename = input('Enter the base learner 2 file path: ')
best_model_3_filename = input('Enter the meta learner file path: ')

# best_model_1_filename = '' # ENTER THE DOWNLOADED FILE_NAME DIRECTLY BY COMMENTING OUT THE ABOVE LINE (KEEP THE FILE IN THE SAME FOLDER OR DIRECTORY)
# best_model_2_filename = ''
# best_model_3_filename = ''

# LOADING THE MODELS
best_model_1 = tf.keras.models.load_model(best_model_1_filename)
best_model_2 = tf.keras.models.load_model(best_model_2_filename)
best_model_3 = joblib.load(best_model_3_filename)

# CREATING NEW DIRECTORY TO STORE PROCESSED IMAGES BY COLOR
test_dir_1 = 'preprocessed_test_data_1'
os.makedirs(test_dir_1, exist_ok=True)

def preprocess_images_by_color(input_dir, output_dir):
  if not os.path.exists(output_dir):
    os.makedirs(output_dir)

  for filename in os.listdir(input_dir):
    if filename.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
      image_path = os.path.join(input_dir, filename)
      output_path = os.path.join(output_dir, filename)

      try:
        with Image.open(image_path) as imlag:

          img =cv2.imread(image_path)
          # PREPROCESSING THE IMAGE
          img_processed = cv2.resize(img, (224, 224)) # FOR ResNet50

          # APPLYING COLOR ENHANCEMENTS
          # EQUALIZED HISTOGRAM
          img_yuv = cv2.cvtColor((img_processed * 255).astype(np.uint8), cv2.COLOR_RGB2YUV)
          img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
          img_processed = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2RGB)

          # CONVERT TO FLOAT32 FOR FURTHER PROCESSING
          img_processed = img_processed.astype(np.float32)

          # SATURATION AND HUE ENHANCEMENTS
          pil_img = Image.fromarray((img_processed * 255).astype(np.uint8))
          enhancer = ImageEnhance.Color(pil_img)
          pil_img = enhancer.enhance(1.5)  # INCREASED SATURATION BY 1.5 TIMES

          # SAVING THE PREPROCESSED IMAGE TO NEW DIRECTORY
          pil_img.save(output_path)

      except Exception as e:
        print(f"Error processing {image_path}: {e}")

preprocess_images_by_color(test_data_dir, test_dir_1)


# CREATING NEW DIRECTORY TO STORE PROCESSED IMAGES BY STRUCTURE
test_dir_2 = 'preprocessed_test_data_2'
os.makedirs(test_dir_2, exist_ok=True)

def preprocess_images_by_structure(input_dir, output_dir):
  if not os.path.exists(output_dir):
        os.makedirs(output_dir)

  for filename in os.listdir(input_dir):
    if filename.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
      image_path = os.path.join(input_dir, filename)
      output_path = os.path.join(output_dir, filename)

      try:
        with Image.open(image_path) as imlag:

          img =cv2.imread(image_path)
          # PREPROCESSING THE IMAGE
          img_processed = cv2.resize(img, (299, 299)) # FOR InceptionV3

          # APPLY STRUCTURAL ENHANCEMENTS
          # APPLY DILATION AND EROSION
          kernel = np.ones((3, 3), np.uint8)
          img_processed = cv2.dilate(img_processed, kernel, iterations=1)
          img_processed = cv2.erode(img_processed, kernel, iterations=1)

          # APPLY GAUSSIAN BLUR TO DENOISE
          img_processed = cv2.GaussianBlur(img_processed, (5, 9), 0)

          # EDGE DETECTION USING CANNY
          edges = cv2.Canny(img_processed, 100, 200)
          img_processed = cv2.cvtColor(edges, cv2.COLOR_GRAY2RGB)

          # SAVING THE PREPROCESSED IMAGE TO NEW DIRECTORY
          cv2.imwrite(output_path, img_processed)
          # img_processed.save(output_path)

      except Exception as e:
        print(f"Error processing {image_path}: {e}")

preprocess_images_by_structure(test_data_dir, test_dir_2)

# CREATING LIST OF IMAGE FILES IN FOLDER
image_files_1 = [os.path.join(test_dir_1, f) for f in os.listdir(test_dir_1) if os.path.isfile(os.path.join(test_dir_1, f))]

# PREDICTIONS ON TEST SET
predictions_1 = []
for image_file in image_files_1:

  img = tf.keras.preprocessing.image.load_img(image_file)
  img_array = tf.keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)

  prediction = best_model_1.predict(img_array)
  predicted_class = 1 if prediction[0][0] >= 0.5 else 0

  predictions_1.append((os.path.basename(image_file), predicted_class))

image_files_2 = [os.path.join(test_dir_2, f) for f in os.listdir(test_dir_2) if os.path.isfile(os.path.join(test_dir_2, f))]

# PREDICTIONS ON TEST SET
predictions_2 = []
for image_file in image_files_2:

  img = tf.keras.preprocessing.image.load_img(image_file)
  img_array = tf.keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)

  prediction = best_model_2.predict(img_array)
  predicted_class = 1 if prediction[0][0] >= 0.5 else 0

  predictions_2.append((os.path.basename(image_file), predicted_class))

df_1 = pd.DataFrame(predictions_1, columns=['Name', 'Predicted_Class'])
df_2 = pd.DataFrame(predictions_2, columns=['Name', 'Predicted_Class'])

test_preds_1 = np.transpose([df_1['Predicted_Class'].to_numpy()])
test_preds_2 = np.transpose([df_2['Predicted_Class'].to_numpy()])

# STACKING THE PREDICTIONS AS FEATURES
stacked_test_features = np.hstack((test_preds_1, test_preds_2))

# PREDICTIONS ON FEATURES
test_predictions = best_model_3.predict(stacked_test_features)

# STORING RESULTS INTO CSV FILE
test_predictions = list(test_predictions)
df = df_1
df = df.drop('Predicted_Class', axis = 1)
df ['Predicted_Class'] = test_predictions
df.to_csv('evaluation.csv', index=False)